generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            Int                  @id @default(autoincrement())
  email         String?
  name          String
  password      String
  celular       String               @unique
  type          UsuarioType          @default(AUTENTICADO)
  cooperativaId Int?
  associadoId   Int?
  colaboradorId Int?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  notificacoes  Notificacao[]
  ofertas       Oferta[]
  resetTokens   PasswordResetToken[]
  compras       Transacao[]          @relation("CompraTransacoes")
  vendas        Transacao[]          @relation("VendaTransacoes")
  preference    UserPreference?
  associado     Associado?           @relation(fields: [associadoId], references: [id])
  colaborador   Colaborador?         @relation(fields: [colaboradorId], references: [id])
  cooperativa   Cooperativa?         @relation(fields: [cooperativaId], references: [id])
}

model Permission {
  id          Int           @id @default(autoincrement())
  path        String        @unique
  title       String?
  icon        String?
  description String?
  menuType    MenuType[]
  usuarioType UsuarioType[]
}

model Cooperativa {
  id            Int           @id @default(autoincrement())
  nome          String
  celular       String?
  cnpj          String?       @unique
  endereco      String?
  cidade        String?
  estado        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  associados    Associado[]
  colaboradores Colaborador[]
  usuarios      Usuario[]
}

model Associado {
  id            Int           @id @default(autoincrement())
  nome          String
  celular       String?
  tipo          AssociadoTipo
  documento     String?
  endereco      String?
  cidade        String?
  estado        String?
  cooperativaId Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cooperativa   Cooperativa   @relation(fields: [cooperativaId], references: [id])
  usuarios      Usuario[]
}

model Colaborador {
  id            Int         @id @default(autoincrement())
  nome          String
  celular       String?
  cargo         String?
  cooperativaId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cooperativa   Cooperativa @relation(fields: [cooperativaId], references: [id])
  usuarios      Usuario[]
}

model Transacao {
  id            String          @id @default(uuid())
  data          DateTime
  quantidade    Float
  precoUnitario Float
  valorTotal    Float
  status        TransacaoStatus
  observacoes   String?
  compradorId   Int
  vendedorId    Int
  tipo          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  comprador     Usuario         @relation("CompraTransacoes", fields: [compradorId], references: [id])
  vendedor      Usuario         @relation("VendaTransacoes", fields: [vendedorId], references: [id])
}


model PrecoCafeHistorico {
  id           Int      @id @default(autoincrement())
  data         DateTime
  precoRobusta Float?
  precoArabica Float?
  fonte        String?
  createdAt    DateTime @default(now())
}

model Notificacao {
  id        String   @id @default(uuid())
  titulo    String
  descricao String
  icon      String   @default("lucide:bell")
  lida      Boolean  @default(false)
  enviada   Boolean  @default(false)
  usuarioId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model UserPreference {
  id        Int      @id @default(autoincrement())
  theme     String   @default("system")
  fontSize  String   @default("medium")
  usuarioId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  usuarioId Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model Oferta {
  id        Int         @id @default(autoincrement())
  userId    Int
  side      OfferSide
  price     Float
  quantity  Float
  status    OfferStatus @default(OPEN)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  usuario   Usuario     @relation(fields: [userId], references: [id])
}

enum UsuarioType {
  ADMINISTRADOR
  COOPERATIVA
  PRODUTOR
  COMPRADOR
  AUTENTICADO
  COLABORADOR
  PUBLICO
}

enum MenuType {
  ROOT
  PERFIL
  DROPDOWN
}

enum AssociadoTipo {
  PRODUTOR
  COMPRADOR
}

enum TransacaoStatus {
  PENDENTE
  CONCLUIDA
  CANCELADA
}

enum OfferSide {
  BUY
  SELL
}

enum OfferStatus {
  OPEN
  FILLED
  CANCELLED
}
