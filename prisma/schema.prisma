generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                Int           @id @default(autoincrement())
  email             String?
  name              String
  password          String
  celular           String        @unique
  type              UsuarioType   @default(AUTENTICADO)

  // Relações
  cooperativa       Cooperativa?  @relation(fields: [cooperativaId], references: [id])
  cooperativaId     Int?

  // Relação com Associado (Produtor/Comprador)
  associado         Associado?    @relation(fields: [associadoId], references: [id])
  associadoId       Int?

  // Colaborador (staff da cooperativa)
  colaborador       Colaborador?  @relation(fields: [colaboradorId], references: [id])
  colaboradorId     Int?

  // Transações
  compras           Transacao[]   @relation("CompraTransacoes")
  vendas            Transacao[]   @relation("VendaTransacoes")

  // Outros
  notificacoes      Notificacao[]
  preference        UserPreference?
  resetTokens       PasswordResetToken[]

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum UsuarioType {
  ADMINISTRADOR
  COOPERATIVA
  PRODUTOR
  COMPRADOR
  AUTENTICADO
  COLABORADOR
}

enum MenuType {
  ROOT
  PERFIL
  DROPDOWN
}

model Permission {
  id          Int           @id @default(autoincrement())
  path        String        @unique
  title       String?
  icon        String?
  description String?
  menuType    MenuType[]
  usuarioType UsuarioType[]
}

model Cooperativa {
  id            Int           @id @default(autoincrement())
  nome          String
  celular       String?
  cnpj          String?       @unique
  endereco      String?
  cidade        String?
  estado        String?

  // Relações
  usuarios      Usuario[]
  colaboradores Colaborador[]
  associados    Associado[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Associado {
  id            Int           @id @default(autoincrement())
  nome          String
  celular       String?
  tipo          AssociadoTipo
  documento     String?       // CPF ou CNPJ
  endereco      String?
  cidade        String?
  estado        String?

  // Relações
  cooperativa   Cooperativa   @relation(fields: [cooperativaId], references: [id])
  cooperativaId Int
  usuarios      Usuario[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum AssociadoTipo {
  PRODUTOR
  COMPRADOR
}

model Colaborador {
  id            Int           @id @default(autoincrement())
  nome          String
  celular       String?
  cargo         String?

  // Relações
  cooperativa   Cooperativa   @relation(fields: [cooperativaId], references: [id])
  cooperativaId Int
  usuarios      Usuario[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transacao {
  id            String        @id @default(uuid())
  data          DateTime
  quantidade    Float         // Quantidade em sacas
  precoUnitario Float
  valorTotal    Float
  status        TransacaoStatus
  observacoes   String?

  // Relações
  comprador     Usuario       @relation("CompraTransacoes", fields: [compradorId], references: [id])
  compradorId   Int
  vendedor      Usuario       @relation("VendaTransacoes", fields: [vendedorId], references: [id])
  vendedorId    Int

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum TransacaoStatus {
  PENDENTE
  CONCLUIDA
  CANCELADA
}

model PrecoCafeHistorico {
  id                Int      @id @default(autoincrement())
  data              DateTime
  precoRobusta      Float?
  precoArabica      Float?
  fonte             String?  // CEPEA/ESALQ ou outra fonte

  createdAt         DateTime @default(now())
}

model Notificacao {
  id         String   @id @default(uuid())
  titulo     String
  descricao  String
  icon       String   @default("lucide:bell")
  lida       Boolean  @default(false)
  enviada    Boolean  @default(false)

  // Relacionamento com o usuário destinatário
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId  Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserPreference {
  id          Int      @id @default(autoincrement())
  theme       String   @default("system")
  fontSize    String   @default("medium")

  // Relation with user
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   Int      @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}
