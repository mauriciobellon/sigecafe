generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       Int         @id @default(autoincrement())
  email    String?
  name     String
  password String
  celular  String      @unique
  type     UsuarioType @default(AUTENTICADO)
  cooperativa   Cooperativa?     @relation(fields: [cooperativaId], references: [id])
  cooperativaId Int?
  produtor      Produtor?        @relation(fields: [produtorId], references: [id])
  produtorId    Int?
  comprador     Comprador?        @relation(fields: [compradorId], references: [id])
  compradorId    Int?
  compras       Transacao[]      @relation("CompraTransacoes")
  vendas        Transacao[]      @relation("VendaTransacoes")
  notificacoes  Notificacao[]
  preference    UserPreference?
}

enum UsuarioType {
  ADMINISTRADOR
  COOPERATIVA
  PRODUTOR
  COMPRADOR
  AUTENTICADO
}

enum MenuType {
  ROOT
  PERFIL
  DROPDOWN
}

model Permission {
  id          Int           @id @default(autoincrement())
  path        String        @unique
  title       String?
  icon        String?
  description String?
  menuType    MenuType[]
  usuarioType UsuarioType[]
}

model Cooperativa {
  id            Int       @id @default(autoincrement())
  nome          String
  celular       String?
  colaboradores Usuario[]
}

model Produtor {
  id            Int       @id @default(autoincrement())
  nome          String
  celular       String?
  usuarios      Usuario[]
}

model Comprador {
  id            Int       @id @default(autoincrement())
  nome          String
  celular       String?
  usuarios      Usuario[]
}

model Transacao {
  id            String   @id @default(uuid())
  data          DateTime
  quantidade    Float
  precoUnitario Float
  status        String // PENDENTE, CONCLUIDA, CANCELADA
  observacoes   String?

  // Relações
  comprador     Usuario  @relation("CompraTransacoes", fields: [compradorId], references: [id])
  compradorId   Int
  vendedor      Usuario  @relation("VendaTransacoes", fields: [vendedorId], references: [id])
  vendedorId    Int

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PrecoCafe {
  id                Int      @id @default(autoincrement())
  data              DateTime
  precoRobusta      Float?
  precoArabica      Float?
}

model Notificacao {
  id         String   @id @default(uuid())
  titulo     String
  descricao  String
  icon       String   @default("lucide:bell")
  lida       Boolean  @default(false)
  enviada    Boolean  @default(false)

  // Relacionamento com o usuário destinatário
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId  Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserPreference {
  id          Int      @id @default(autoincrement())
  theme       String   @default("system")
  fontSize    String   @default("medium")

  // Relation with user
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   Int      @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
